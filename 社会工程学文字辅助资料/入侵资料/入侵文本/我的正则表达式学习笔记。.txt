D0000D发往论坛板块-------------------------------------------------------
No2  号板块  技术文章
D8888D贴子标题-------------------------------------------------------
我的正则表达式学习笔记。
D8888D主贴内容-------------------------------------------------------
我用的JAVA，其它语言大同小异，有需要的朋友就下吧。。
先给大家看一部分，完整的在附件里面，， 因为本人水平有限，难免会有错误在里面，所以如果发现错误了，请提出来 谢谢。。
转载请注明原作者：Ninty [url=Http://www.ForJJ.com/]链接标记Http://www.ForJJ.com/[/url] [url=http://www.t00ls.net/#viewSource]链接标记预览源代码[/url] [url=http://www.t00ls.net/#printSource]链接标记打印[/url][url=http://www.t00ls.net/#about]链接标记关于[/url]01元字符介绍： 

02元字符分为匹配位置的字符和匹配字符 的字符！ 

03匹配位置的元字符为：^ $ \b 

04  

051. .(点)，默认匹配除了行结束符以外的任意字符！有问题。 

06        "a".matches("."); //true 

07        "1".matches("."); //true 

08        "我".matches("."); //true 

09          

10        /* 

11                这里说的行结束符指以下几个： 

12  

13                新行（换行）符 ('\n')、  

14                后面紧跟新行符的回车符 ("\r\n")、  

15                单独的回车符 ('\r')、  

16                下一行字符 ('\u0085')、  

17                行分隔符 ('\u2028') 或  

18                段落分隔符 ('\u2029)。 

19  

20                并不是简单地指换行符号\n 

21  

22                主要记住\r、\n、\r\n就行了！ 

23                "." 在默认情况下是不匹配它们的！ 

24                注意，这里说默认情况下，就意味着我们可以更改这个默认情况！ 

25                更改的方法： 

26  

27                    Pattern pat = Pattern.compile(".",Pattern.DOTALL); 

28            Matcher mat = pat.matcher("\n"); 

29            System.out.println(mat.find()); 

30  

31                        true! 

32                        注意compile的第二个参数Pattern.NOTALL 

33                        这个参数表示，这个正则表达式里的 "."匹配任何字符，当然也就包括了行结束符号 

34  

35        */ 

36  

37  

382.\b ，它匹配的是一个位置，这个位置表示单词的分界处，一般认为是\w 与\W的分界处。 

39        "book".matches("\\bbook\\b"); 

40                /* 

41                        true，这个正则表达式要求book的两端要有单词分界！ 

42                        book这个单词的第一个字母b的前面是行的开始，也就是^ ,而最后一个字母k的后面是行的结束，也就是$ 

43                        ^ 是 \W ,而b 是\w ，所以第一个\b被匹配，k是\w,而$ 是\W，所以后面的那个\b被匹配 

44                */ 

45  

46        "abook".matches("\\bbook\\b"); 

47                /* 

48                        false,因为book所匹配的单词前面是a，a并不是\W，而正则表达式要求book 所匹配到的字符串前面是 

49                        \b ，所以false 

50                */ 

51  

52        "a@book!".matches("\\bbook\\b"); 

53        /* 

54                想当然地认为这个结果应该是true 

55                可结果却是false! 

56                这和matches方法是有关系的！这个方法在检测的时候，自动给正则表达式添加了^和$ 

57                所以上面的正则表达式实际上就变成了 

58                ^\\bbook\\b$ 

59                这样肯定是不匹配的！ 

60                换成这样，结果就是true了： 

61  

62            Pattern pat = Pattern.compile("\\bbook\\b"); 

63            Matcher mat = pat.matcher("a@book!"); 

64            System.out.println(mat.find()); 

65        */
本帖隐藏的内容需要回复才可以浏览
